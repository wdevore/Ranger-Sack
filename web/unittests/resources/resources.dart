part of unittests;

/*
  */
class Resources {
  ImageElement rangerLogo;
  ImageElement skull;
  
  ImageElement list;
  ImageElement leftArrow;
  ImageElement upArrow;

  ImageElement language;
  ImageElement rocket;
  ImageElement rocket2;
  ImageElement colorRocket;
  ImageElement rotate;
  ImageElement scale;
  ImageElement translate;
  ImageElement shuffle;
  ImageElement touch;
  ImageElement reply;
  ImageElement home;
  ImageElement keyboard;
  ImageElement mouse;
  ImageElement grin;
  ImageElement droplets;
  ImageElement lab;

  ImageElement expand;
  ImageElement cycle;
  ImageElement feed;

  static const int BASE_ICON_SIZE = 32;
  
  int _iconLoadCount = 0;
  int _iconTotal = 0;

  int _bootLoadCount = 0;
  int _bootTotal = 0;

  /// Loaded icons are centered automatically.
  bool autoCenter = true;
  
  Completer _bootWorker;
  Completer _baseWorker;

  Function _loadedCallback;

  bool _bootInitialized = false;
  bool _baseInitialized = false;
  
  bool get isBootResourcesReady => _bootInitialized;
  bool get isBaseResourcesReady => _baseInitialized;
  
  Future loadBootResources() {
    _bootWorker = new Completer();

    if (_bootInitialized)
      _bootWorker.complete();
    
    _loadBootImage((ImageElement ime) {rangerLogo = ime;}, "resources/RangerDart.png", 960, 540);

    return _bootWorker.future;
  }

  Future loadBaseResources() {
    _baseWorker = new Completer();

    _loadBaseImage((ImageElement ime) {list = ime;}, "resources/list.svg", BASE_ICON_SIZE, BASE_ICON_SIZE);

    _loadBaseImage((ImageElement ime) {skull = ime;}, "resources/skull.svg", BASE_ICON_SIZE, BASE_ICON_SIZE);

    _loadBaseImage((ImageElement ime) {leftArrow = ime;}, "resources/arrow-left.svg", BASE_ICON_SIZE, BASE_ICON_SIZE);
    _loadBaseImage((ImageElement ime) {upArrow = ime;}, "resources/arrow-up.svg", BASE_ICON_SIZE, BASE_ICON_SIZE);

    _loadBaseImage((ImageElement ime) {language = ime;}, "resources/language.svg", BASE_ICON_SIZE, BASE_ICON_SIZE);
    _loadBaseImage((ImageElement ime) {rocket = ime;}, "resources/rocket.svg", BASE_ICON_SIZE, BASE_ICON_SIZE);
    
    // Note: the proper dimensions were identified by inspecting the svg file.
    // The svg file was generated by sodipodi/inkscape application and the dimensions are
    // found in the "namedview" element as: inkscape:width and inkscape:height.
    // This is one of those instances where using HttpRequest could be handy
    // such that I could inspect the svg stream looking for known elements in hopes
    // of discovering the design dimensions.
    _loadBaseImage((ImageElement ime) {rocket2 = ime;}, "resources/rocket2.svg", 613, 586);
    
    // Rocket png by: https://www.iconfinder.com/jerrylow
    _loadBaseImage((ImageElement ime) {colorRocket = ime;}, "resources/color_rocket.png", 128, 128);
    
    _loadBaseImage((ImageElement ime) {rotate = ime;}, "resources/rotate.svg", BASE_ICON_SIZE, BASE_ICON_SIZE);
    _loadBaseImage((ImageElement ime) {scale = ime;}, "resources/scale.svg", BASE_ICON_SIZE, BASE_ICON_SIZE);
    _loadBaseImage((ImageElement ime) {translate = ime;}, "resources/translate.svg", BASE_ICON_SIZE, BASE_ICON_SIZE);
    _loadBaseImage((ImageElement ime) {shuffle = ime;}, "resources/shuffle.svg", BASE_ICON_SIZE, BASE_ICON_SIZE);
    _loadBaseImage((ImageElement ime) {touch = ime;}, "resources/touch.svg", BASE_ICON_SIZE, BASE_ICON_SIZE);
    _loadBaseImage((ImageElement ime) {reply = ime;}, "resources/reply.svg", BASE_ICON_SIZE, BASE_ICON_SIZE);
    _loadBaseImage((ImageElement ime) {home = ime;}, "resources/home.svg", BASE_ICON_SIZE, BASE_ICON_SIZE);
    _loadBaseImage((ImageElement ime) {keyboard = ime;}, "resources/keyboard.svg", BASE_ICON_SIZE, BASE_ICON_SIZE);
    _loadBaseImage((ImageElement ime) {mouse = ime;}, "resources/mouse.svg", BASE_ICON_SIZE, BASE_ICON_SIZE);
    _loadBaseImage((ImageElement ime) {grin = ime;}, "resources/grin.svg", BASE_ICON_SIZE, BASE_ICON_SIZE);
    _loadBaseImage((ImageElement ime) {droplets = ime;}, "resources/droplets.svg", BASE_ICON_SIZE, BASE_ICON_SIZE);
    _loadBaseImage((ImageElement ime) {lab = ime;}, "resources/lab.svg", BASE_ICON_SIZE, BASE_ICON_SIZE);
    _loadBaseImage((ImageElement ime) {expand = ime;}, "resources/expand.svg", BASE_ICON_SIZE, BASE_ICON_SIZE);
    _loadBaseImage((ImageElement ime) {cycle = ime;}, "resources/cycle.svg", BASE_ICON_SIZE, BASE_ICON_SIZE);
    _loadBaseImage((ImageElement ime) {feed = ime;}, "resources/feed.svg", BASE_ICON_SIZE, BASE_ICON_SIZE);

    return _baseWorker.future;
  }

  void _loadBootImage(Ranger.ImageLoaded loaded, String source, int iWidth, int iHeight) {
    _bootTotal++;
    Ranger.ImageLoader loader = new Ranger.ImageLoader.withResource(source);
    loader.load(iWidth, iHeight).then((ImageElement ime) {
      loaded(ime);
      _bootImageLoaded();
    });
  }
  
  void _loadBaseImage(Ranger.ImageLoaded loaded, String source, int iWidth, int iHeight) {
    _iconTotal++;
    Ranger.ImageLoader loader = new Ranger.ImageLoader.withResource(source);
    loader.load(iWidth, iHeight).then((ImageElement ime) {
      loaded(ime);
      _onBaseComplete();
    });
  }
  
  void _bootImageLoaded() {
    _bootLoadCount++;
    _checkBootCompleteness();
  }

  void _onBaseComplete() {
    _iconLoadCount++;
    _checkForCompleteness();
  }

  bool get isBaseLoaded => _iconLoadCount == _iconTotal; 
  bool get isBootLoaded => _bootLoadCount == _bootTotal; 
  
  void _checkForCompleteness() {
    if (isBaseLoaded) {
      _baseInitialized = true;
      //print("Resources: resources loaded.");
      _baseWorker.complete();
    }
  }

  void _checkBootCompleteness() {
    if (isBootLoaded) {
      _bootInitialized = true;
      //print("Resources: boot resources loaded.");
      _bootWorker.complete();
    }
  }
  

}